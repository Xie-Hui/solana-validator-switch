# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Build outputs
dist/
build/
*.tsbuildinfo

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.test
.env.production
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Runtime configuration
config.json
config.local.json

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Editor directories and files
.vscode/
.idea/
*.swp
*.swo
*~

# Vim swap files
*.swp
*.swo

# JetBrains IDEs
.idea/
*.iml
*.iws
*.ipr

# Visual Studio Code
.vscode/

# Sublime Text
*.sublime-project
*.sublime-workspace

# Atom
.atom/

# SSH keys and certificates
*.pem
*.key
*.crt
*.csr
*.p12
*.pfx

# Application-specific files
.solana-validator-switch/
config/local.json
secrets/
private/

# Test artifacts
test-results/
screenshots/
videos/

# Documentation builds
docs/build/

# Backup files
*.bak
*.backup
*.old
*.orig

# macOS
.AppleDouble
.LSOverride
Icon

# Linux
*~

# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/

# NPM package files
*.tgz
package-lock.json.backup

# Yarn
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# SvelteKit build / generate output
.svelte-kit

# End of https://www.toptal.com/developers/gitignore/api/node 

# Rust
# Compiled binaries and debug artifacts
/target/
**/*.rs.bk
*.pdb

# Cargo lock files for binaries (keep for libraries)
# Cargo.lock is committed for binaries, ignored for libraries
# Since this is a binary CLI tool, we keep Cargo.lock

# Cargo build artifacts
/target/
**/target/

# Rust procedural macros
*.so

# Backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds
*.pdb

# Rust-analyzer
/rust-project.json

# IDE files for Rust
*.iml
/.idea/
.vscode/
*.swp
*.swo

# OS generated files (Rust development)
.DS_Store
.DS_Store?
._*

# Rust testing and benchmarking
/benches/target/
/tests/target/

# wasm-pack build artifacts
/pkg/

# Generated by cargo-outdated
Cargo.lock.orig

# Test scripts and artifacts
test-rust.sh
rust-test-*

# Claude
.claude

# refrence docs
/reference_docs/