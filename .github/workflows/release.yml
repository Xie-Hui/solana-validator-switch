name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build
    strategy:
      matrix:
        include:
          # Linux builds
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary: svs
            archive: tar.gz
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            binary: svs
            archive: tar.gz
            cross: true
          
          # macOS builds
          - target: x86_64-apple-darwin
            os: macos-latest
            binary: svs
            archive: tar.gz
          - target: aarch64-apple-darwin
            os: macos-latest
            binary: svs
            archive: tar.gz
          
          # Windows builds
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary: svs.exe
            archive: zip

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Install cross-compilation tools
        if: matrix.cross
        uses: taiki-e/install-action@v2
        with:
          tool: cross
      
      
      - name: Set up OpenSSL environment
        if: matrix.cross
        run: |
          echo "OPENSSL_STATIC=1" >> $GITHUB_ENV
          echo "OPENSSL_VENDORED=1" >> $GITHUB_ENV

      - name: Build (native)
        if: '!matrix.cross'
        run: cargo build --release --target ${{ matrix.target }}
      
      - name: Build (cross)
        if: matrix.cross
        run: cross build --release --target ${{ matrix.target }}
      
      - name: Prepare artifacts (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czf ../../../svs-${{ matrix.target }}.tar.gz ${{ matrix.binary }}
      
      - name: Prepare artifacts (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          cd target\${{ matrix.target }}\release
          Compress-Archive -Path ${{ matrix.binary }} -DestinationPath ..\..\..\svs-${{ matrix.target }}.zip
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.target }}
          path: |
            svs-*.tar.gz
            svs-*.zip

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: binary-*
          merge-multiple: true
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            svs-*.tar.gz
            svs-*.zip
          draft: false
          prerelease: false
          generate_release_notes: true