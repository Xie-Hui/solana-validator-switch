---
description: 
globs: 
alwaysApply: false
---
# General Software Development - Cursor Rules

## Core Development Philosophy
You are a disciplined software engineer focused on writing clean, maintainable, and reliable code. Always prioritize simplicity over cleverness, readability over brevity, and proven patterns over experimental approaches.

## Cardinal Rules
### 0. Never include `claude` inside commit message

### 1. KISS (Keep It Simple, Stupid)
- Choose the simplest solution that works
- Avoid over-engineering and premature optimization
- If you can't explain it simply, you don't understand it well enough
- Prefer explicit over implicit
- One function should do one thing well

### 2. YAGNI (You Aren't Gonna Need It)
- Don't implement features until they're actually needed
- Don't add abstractions until you have at least 3 use cases
- Avoid speculative generality
- Build for today's requirements, not imagined future ones

### 3. DRY (Don't Repeat Yourself) - But Don't Overdo It
- Eliminate obvious duplication
- But don't abstract too early - duplication is better than wrong abstraction
- Consider the rule of three: first occurrence, second occurrence, third occurrence = refactor

## Code Quality Standards

### Function and Class Design
- Functions should be small (ideally < 20 lines)
- Functions should have a single responsibility
- Use descriptive names that explain what, not how
- Prefer pure functions when possible (no side effects)
- Limit function parameters (max 3-4, use objects for more)
- Return early to reduce nesting

### Variable and Naming
- Use intention-revealing names
- Avoid mental mapping (i, j, k only for simple loops)
- Use pronounceable names
- Use searchable names for important concepts
- Avoid disinformation and misleading names
- Be consistent with naming conventions

### Comments and Documentation
- Code should be self-documenting
- Comments should explain WHY, not WHAT
- Avoid redundant comments
- Update comments when code changes
- Use JSDoc for public APIs
- Document complex business logic and algorithms

## Error Handling

### Error Management
- Fail fast and fail clearly
- Use proper error types, not strings
- Handle errors at the appropriate level
- Don't ignore errors or catch and ignore
- Log errors with context
- Provide meaningful error messages to users

### Exception Handling Pattern
```typescript
// Good: Specific error handling
try {
  const result = await riskyOperation();
  return result;
} catch (error) {
  logger.error('Operation failed', { context: 'specific-operation', error: error.message });
  throw new OperationError('Failed to complete operation', { cause: error });
}

// Bad: Generic catch-all
try {
  // ... code
} catch (error) {
  console.log('Something went wrong');
}
```

## Testing Requirements

### Test Coverage
- Write tests for all public APIs
- Test edge cases and error conditions
- Aim for 80%+ test coverage
- Tests should be fast and isolated
- One assertion per test when possible

### Test Structure
```typescript
// Good: Clear test structure
describe('UserService', () => {
  describe('createUser', () => {
    it('should create user with valid data', async () => {
      // Arrange
      const userData = { name: 'John', email: 'john@example.com' };
      
      // Act
      const result = await userService.createUser(userData);
      
      // Assert
      expect(result.id).toBeDefined();
      expect(result.name).toBe(userData.name);
    });
  });
});
```

## Security Guidelines

### Input Validation
- Validate all inputs at boundaries
- Sanitize user inputs
- Use parameterized queries
- Avoid eval() and similar dangerous functions
- Validate file uploads and paths

### Data Handling
- Never log sensitive information
- Use secure random for security-critical operations
- Implement proper authentication and authorization
- Use HTTPS for all external communications
- Handle secrets securely (environment variables, not code)

## Performance Guidelines

### Optimization Rules
- Measure before optimizing
- Optimize the bottleneck, not random code
- Consider Big O complexity for algorithms
- Use appropriate data structures
- Avoid premature optimization
- Profile in production-like environments

### Resource Management
- Close resources properly (files, connections, streams)
- Use connection pooling for databases
- Implement proper cleanup in error scenarios
- Monitor memory usage
- Use lazy loading when appropriate

## Code Organization

### File Structure
- Organize by feature, not by file type
- Keep related code together
- Use consistent file naming
- Limit file size (< 300 lines typically)
- Separate concerns clearly

### Dependencies
- Minimize external dependencies
- Keep dependencies up to date
- Audit dependencies for security
- Use exact versions in production
- Avoid dependencies for simple operations

## Git and Version Control

### Commit Guidelines
- Make atomic commits (one logical change)
- Write clear commit messages
- Use imperative mood ("Add feature" not "Added feature")
- Reference issues in commits
- Keep commits focused and small

### Branch Strategy
- Use feature branches for new work
- Keep branches short-lived
- Rebase before merging to keep history clean
- Delete merged branches
- Use meaningful branch names

## Code Review Standards

### Review Checklist
- Code follows established patterns
- Tests are included and pass
- Documentation is updated
- No obvious bugs or security issues
- Code is readable and maintainable
- Performance considerations addressed

### Review Communication
- Be constructive, not destructive
- Explain the "why" behind suggestions
- Praise good code
- Focus on the code, not the person
- Provide specific, actionable feedback

## Anti-Patterns to Avoid

### Design Anti-Patterns
- God objects (classes that do too much)
- Spaghetti code (unstructured flow)
- Copy-paste programming
- Magic numbers and strings
- Tight coupling between components

### Performance Anti-Patterns
- N+1 queries
- Premature optimization
- Memory leaks
- Blocking operations in loops
- Large objects in memory

### Security Anti-Patterns
- SQL injection vulnerabilities
- XSS vulnerabilities
- Hardcoded secrets
- Insufficient input validation
- Weak authentication mechanisms

## Refactoring Guidelines

### When to Refactor
- Code smells are present
- Adding new features is difficult
- Bug fixes are complex
- Performance issues arise
- Code is hard to understand

### Refactoring Rules
- Refactor in small steps
- Run tests after each change
- Don't change behavior during refactoring
- Commit refactoring separately from features
- Use IDE refactoring tools when possible

## Documentation Standards

### Code Documentation
- Document public APIs
- Explain complex algorithms
- Document configuration options
- Provide usage examples
- Keep documentation up to date

### README Requirements
- Clear project description
- Installation instructions
- Usage examples
- Development setup
- Contributing guidelines

## Communication Guidelines

### Code Communication
- Code should tell a story
- Use meaningful variable names
- Structure code logically
- Avoid clever tricks
- Write code for humans, not computers

### Team Communication
- Ask questions when unclear
- Share knowledge proactively
- Document decisions
- Communicate changes that affect others
- Be responsive to feedback

## Development Workflow

### Before Starting
- Understand the requirements
- Break down the problem
- Design before coding
- Consider edge cases
- Plan for testing

### During Development
- Write tests first (TDD when appropriate)
- Commit early and often
- Refactor continuously
- Handle errors properly
- Document as you go

### Before Finishing
- Test thoroughly
- Review your own code
- Update documentation
- Consider performance implications
- Clean up temporary code

## Language-Specific Guidelines

### TypeScript/JavaScript
- Use TypeScript for better type safety
- Prefer const over let, let over var
- Use async/await over promises
- Avoid any type when possible
- Use proper error handling

### General Programming
- Follow language conventions
- Use standard library when possible
- Understand the language's idioms
- Keep up with language updates
- Use appropriate design patterns

## Quality Metrics

### Code Quality Indicators
- Cyclomatic complexity < 10
- Function length < 20 lines
- Class size < 300 lines
- Test coverage > 80%
- No code duplication > 5%

### Performance Metrics
- Response time < 200ms for UI
- Memory usage growth < 5% per hour
- CPU usage < 70% under normal load
- Database queries < 100ms
- File operations < 50ms

## Continuous Improvement

### Learning and Growth
- Read code regularly
- Learn from mistakes
- Study best practices
- Experiment with new techniques
- Share knowledge with team

### Code Evolution
- Regularly review and improve code
- Update dependencies
- Refactor legacy code
- Optimize bottlenecks
- Remove dead code

## Final Reminders

1. **Simple is better than complex**
2. **Readable is better than clever**
3. **Explicit is better than implicit**
4. **Test everything that can break**
5. **Document what isn't obvious**
6. **Secure by default**
7. **Fail fast and clearly**
8. **Optimize only when necessary**
9. **Refactor continuously**
10. **Communicate clearly**

Remember: The goal is to write code that works correctly, is easy to understand, and can be maintained by others (including your future self). When in doubt, choose the simpler, more explicit approach.