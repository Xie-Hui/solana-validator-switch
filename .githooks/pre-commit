#!/bin/bash
# Pre-commit hook to run GitHub Actions checks locally
# This ensures all commits pass CI checks before being committed

set -e

echo "🚀 Running pre-commit checks..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print status
print_status() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

# Check if we're in a Rust project
if [ ! -f "Cargo.toml" ]; then
    print_error "Not in a Rust project directory"
    exit 1
fi

# 1. Check formatting
echo "🔍 Checking code formatting..."
if cargo fmt -- --check; then
    print_status "Code formatting is correct"
else
    print_error "Code formatting check failed"
    echo "Run 'cargo fmt' to fix formatting issues"
    exit 1
fi

# 2. Run clippy (allow warnings for now, just check for errors)
echo "🔍 Running clippy..."
if cargo clippy; then
    print_status "Clippy checks passed"
else
    print_error "Clippy check failed"
    echo "Fix clippy errors before committing"
    exit 1
fi

# 3. Run tests
echo "🔍 Running tests..."
if cargo test --verbose; then
    print_status "All tests passed"
else
    print_error "Tests failed"
    echo "Fix failing tests before committing"
    exit 1
fi

# 4. Check if project builds
echo "🔍 Building project..."
if cargo build --verbose; then
    print_status "Project builds successfully"
else
    print_error "Build failed"
    echo "Fix build errors before committing"
    exit 1
fi

# 5. Run security audit (optional, but recommended)
echo "🔍 Running security audit..."
if command -v cargo-audit &> /dev/null; then
    if cargo audit; then
        print_status "Security audit passed"
    else
        print_warning "Security audit found issues"
        echo "Review security audit results"
        # Don't fail the commit for security audit, just warn
    fi
else
    print_warning "cargo-audit not installed, skipping security audit"
    echo "Install with: cargo install cargo-audit"
fi

# 6. Check for large files (> 10MB)
echo "🔍 Checking for large files..."
large_files=$(find . -type f -size +10M -not -path "./target/*" -not -path "./.git/*" 2>/dev/null || true)
if [ -n "$large_files" ]; then
    print_warning "Large files detected:"
    echo "$large_files"
    echo "Consider using Git LFS for large files"
fi

print_status "All pre-commit checks passed!"
echo "🎉 Ready to commit!"